apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-sidecar-template
  namespace: otel-sidecar
spec:
  mode: sidecar
  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 5s
            static_configs:
            - targets: ['0.0.0.0:8000']
            #metric_relabel_configs:
            #- source_labels: ['__name__']
            #  regex: 'http_active_requests'
            #  action: keep  # Only keep the 'http_active_requests' metric
    processors:
      resourcedetection/env:
        detectors: [env]
        timeout: 2s
        override: false
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
              - set(attributes["pod"], resource.attributes["k8s.pod.name"])
              - set(attributes["deployment"], resource.attributes["k8s.deployment.name"])
      filter/metrics:
        metrics:
          include:
            match_type: strict
            metric_names:
              - http_active_requests
    exporters:
      otlp/keda:
        endpoint: keda-otel-scaler.keda.svc:4317
        compression: "none"
        tls:
          insecure: true
      debug:
        verbosity: detailed
      prometheus:
        endpoint: "0.0.0.0:1234"
        metric_expiration: 180m
        enable_open_metrics: true
    service:
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [filter/metrics, resourcedetection/env, transform]
          exporters: [debug, prometheus, otlp/keda]
